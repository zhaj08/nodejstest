/*global describe, before, beforeEach, it */

var assert          = require("assert");
var mysql           = require("mysql");
var MySQLConnector  = require('../index');

describe("MySQLConnector", function () {
    "use strict";

    var config  = null,
        options = null,
        mainConn = null,

        mainConf = {
            host: "localhost",
            port: "3306",
            database: "test",
            user: "root",
            password: "root"
        };

    before(function (done) {
        mainConn = mysql.createConnection(mainConf);
        mainConn.connect(function (error) {
            if (error) { mainConn = null; }
            done(error);
        });
    });

    beforeEach(function () {
        config = {
            host: mainConf.host,
            port: mainConf.port,
            database: mainConf.database
        };

        options = {
            username: mainConf.user,
            password: mainConf.password
        };
    });

    after(function (done) {
        if (mainConn) return mainConn.end(done);
        done();
    });

    describe("New Connection", function () {
        it("Should Fail on incorrect Connection String", function () {
            assert.throws(function () {
                var connector = new MySQLConnector("incorrect Connection String");
                assert.ok(!connector);
            });
        });

        it("Should Fail on invalid password", function (done) {
            options.password = 'INVALID';
            var con = new MySQLConnector(config);
            con.authenticate(options, function (error) {
                assert.equal(error.errno, 1045);
                assert.equal(error.code, 'ER_ACCESS_DENIED_ERROR');
                done();
            });
        });

        it("Should Fail on invalid username", function (done) {
            options.username = 'INVALID';
            var con = new MySQLConnector(config);
            con.authenticate(options, function (error) {
                assert.equal(error.errno, 1045);
                assert.equal(error.code, 'ER_ACCESS_DENIED_ERROR');
                done();
            });
        });

        it("Should Fail on invalid host", function (done) {
            config.host = 'INVALID';
            var con = new MySQLConnector(config);
            con.authenticate(options, function (error) {
                assert.equal(error.errno, "ENOTFOUND");
                done();
            });
        });

        it("Should Fail on invalid port", function (done) {
            config.port = 9999;
            var con = new MySQLConnector(config);
            con.authenticate(options, function (error) {
                assert.equal(error.code, "ECONNREFUSED");
                done();
            });
        });

        it("Should Fail on invalid DB", function (done) {
            config.database = 'INVALID';
            var con = new MySQLConnector(config);
            con.authenticate(options, function (error) {
                assert.equal(error.errno, 1049);
                assert.equal(error.code, "ER_BAD_DB_ERROR");
                done();
            });
        });

        it("Should Connect successfully", function (done) {
            var con = new MySQLConnector(config);
            con.authenticate(options, done);
        });
    });

    describe("Queries with authentication invoked", function () {
        it("Select Query with no parameters", function (done) {
            var con = new MySQLConnector(config),
                data = {sql: "select * from products"};

            con.authenticate(options, function (error, authData) {
                assert.ok(!error);
                assert.ok(authData);
                data.auth = authData.auth;

                con.query(data, function (error, result) {
                    assert.ok(!error);
                    assert.equal(3, result.length);
                    done();
                });
            });
        });

        it("Select Query with parameters", function (done) {
            var con = new MySQLConnector(config),
                data = {sql: "select * from products where id = ?", values: [1]};

            con.authenticate(options, function (error, authData) {
                assert.ok(!error);
                assert.ok(authData);
                data.auth = authData.auth;

                con.query(data, function (error, result) {
                    assert.ok(!error);
                    assert.equal(1, result.length);
                    assert.equal("hammer", result[0].name);
                    done();
                });
            });
        });

        it("Insert Statement with parameters (Transactional)", function (done) {
            var insertStatement = "insert into products (id, name, price) values (?, ?, ?)",
                insertValues = [4, 'cellphone', '250'],
                data = {},
                con = new MySQLConnector(config);

            con.authenticate(options, function (error, authData) {
                assert.ok(!error);
                assert.ok(authData);

                data.sql = "START TRANSACTION";
                data.auth = authData.auth;
                con.query(data, function (error, result) {//Begin Transaction
                    assert.ok(!error);
                    assert.ok(result);
                    data.sql = insertStatement;
                    data.values = insertValues;
                    con.query(data, function (error, result) {//Insert row
                        assert.ok(!error);
                        assert.ok(result);
                        data.sql = "select * from products where name = ?";
                        data.values = ["cellphone"];
                        con.query(data, function (error, result) {//Check row existance
                            assert.ok(!error);
                            assert.equal(1, result.length);
                            assert.equal("cellphone", result[0].name);

                            data.sql = "ROLLBACK";
                            delete data.values;
                            con.query(data, function (error, result) {//Rollback Tx
                                assert.ok(!error);
                                assert.ok(result);
                                done();
                            });
                        });
                    });
                });
            });
        });

        it("Insert multiple Statement with parameters (Transactional)", function (done) {
            var insertStatement = "insert into products (id, name, price) VALUES ?",
                insertValues = [[
                    [4, 'aphone', '1'],
                    [5, 'bphone', '2'],
                    [6, 'cphone', '3']
                ]],
                data = {},
                con = new MySQLConnector(config);

            con.authenticate(options, function (error, authData) {
                assert.ok(!error);
                assert.ok(authData);

                data.sql = "START TRANSACTION";
                data.auth = authData.auth;
                con.query(data, function (error, result) {//Begin Transaction
                    assert.ok(!error);
                    assert.ok(result);
                    
                    data.sql = insertStatement;
                    data.values = insertValues;
                    con.query(data, function (error, result) {//Insert row
                        assert.ifError(error);
                        assert.ok(result);
                        assert.strictEqual(result.affectedRows, 3);

                        data.sql = "ROLLBACK";
                        delete data.values;
                        con.query(data, function (error, result) {//Rollback Tx
                            assert.ok(!error);
                            assert.ok(result);
                            done();
                        });
                    });
                });
            });
        });
    });

    describe("Queries with no authentication invoked", function () {
        it("Should fail with invalid user and no auth", function (done) {
            var con = new MySQLConnector(config),
                data = {username: 'INVALID',
                        password: 'root',
                        sql: "select * from products"};

            con.query(data, function (error, result) {
                assert.ok(error);
                assert.equal(result, null);
                done();
            });
        });

        it("Should fail with invalid auth", function (done) {
            var con = new MySQLConnector(config),
                data = {username: 'INVALID',
                        password: 'root',
                        sql: "select * from products",
                        auth: "INVALID"};

            con.query(data, function (error, result) {
                assert.ok(error);
                assert.equal(result, null);
                done();
            });
        });

        it("Should fail with valid username but invalid password", function (done) {
            var con = new MySQLConnector(config),
                data = {username: 'root',
                        password: 'root',
                        sql: "select * from products"};

            con.query(data, function (error, result) {
                assert.ok(!error);
                assert.equal(3, result.length);

                data.password = 'INVALID';

                con.query(data, function (error, result) {
                    assert.ok(error);
                    assert.equal(result, null);
                    done();
                });
            });
        });

        it("Select Query with user and password", function (done) {
            var con = new MySQLConnector(config),
                data = {username: 'root',
                        password: 'root',
                        sql: "select * from products"};

            con.query(data, function (error, result) {
                assert.ok(!error);
                assert.equal(3, result.length);
                done();
            });
        });
    });

    describe("close method", function () {

        it("should work if no connections", function (done) {
            var con = new MySQLConnector(config);
            con.close(function (err) {
                assert.ok(!err);
                done();
            });
        });

        it("should dispose all connections", function (done) {
            getCurrentConnectionsCount(function (err, firstCount) {
                assert.ok(!err);
    
                var con = new MySQLConnector(config);

                con.authenticate(options, function (error, authData) {
                    assert.ok(!error);
                    assert.ok(authData);

                    getCurrentConnectionsCount(function (err, secondCount) {
                        assert.ok(!err);
                        assert.equal(secondCount, firstCount + 1);

                        con.close(function (err) {
                            assert.ok(!err);
                            getCurrentConnectionsCount(function (err, secondCount) {
                                assert.ok(!err);
                                assert.equal(secondCount, firstCount);
                                done();
                            });
                        });
                    });
                });
            });
        });
    });

    var getCurrentConnectionsCount = function (cb) {
        assert.ok(mainConn);
        mainConn.query("SHOW STATUS where `variable_name` = 'Threads_connected';", function (err, rows, fields) {
          if (err) return cb(err);
          cb (null, parseInt(rows[0].Value));
        });
    };
});

